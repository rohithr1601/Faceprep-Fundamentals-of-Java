Description

Ram has a fruit shop. He has arranged some set of fruits in the column and row-wise. Ram needs to find which row and column have a maximum number of fruits. Help him to find out.



Input Format

Input consists of 2 integers(size of rows and columns) and 1 2D array.



Output Format

The output prints the sum of all rows and columns as well as print the row and column which has the maximum sum. Refer to the sample output.



Sample Input 1

3

3

1 6 8

2 5 1

3 8 2



Sample Output 1

The Sum of rows is 15 8 13

Row 1 has a maximum sum

The Sum of columns is 6 19 11

Column 2 has the maximum sum


Case 1
Case 2
Input (stdin)
3
3
1 6 8
2 5 1
3 8 2


Output (stdout)
The Sum of rows is 15 8 13
Row 1 has a maximum sum
The Sum of columns is 6 19 11
Column 2 has the maximum sum

+++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int mrs = 0, mr = 0, mcs = 0, mc = 0;
        int[][] a = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        System.out.print("The Sum of rows is ");
        for (int i = 0; i < m; i++) {
            int rs = 0;
            for (int j = 0; j < n; j++) {
                rs += a[i][j];
            }
            System.out.print(rs + " ");
            if (rs > mrs) {
                mrs = rs;
                mr = i + 1;
            }
        }
        System.out.println("\nRow " + mr + " has a maximum sum");

        System.out.print("The Sum of columns is ");
        for (int i = 0; i < n; i++) {
            int cs = 0;
            for (int j = 0; j < m; j++) {
                cs += a[j][i];
            }
            System.out.print(cs + " ");
            if (cs > mcs) {
                mcs = cs;
                mc = i + 1;
            }
        }
        System.out.println("\nColumn " + mc + " has the maximum sum");
    }
}
